-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Program                            (0)
	Program -> Expr                                    (1)
	Decs -> Decs Dec                                   (2)
	Decs ->                                            (3)
	Dec -> TyDec                                       (4)
	Dec -> VarDec                                      (5)
	Dec -> FunDec                                      (6)
	TyDec -> type id '=' Ty                            (7)
	Ty -> id                                           (8)
	Ty -> '{' TyFields '}'                             (9)
	Ty -> array of id                                  (10)
	TyFields -> TyFieldsRev                            (11)
	TyFields ->                                        (12)
	TyFieldsRev -> TyField                             (13)
	TyFieldsRev -> TyFieldsRev ',' TyField             (14)
	TyField -> id ':' TypeId                           (15)
	TypeId -> id                                       (16)
	VarDec -> var id OptType ':=' Expr                 (17)
	OptType -> ':' TypeId                              (18)
	OptType ->                                         (19)
	FunDec -> function id '(' TyFields ')' OptType '=' Expr   (20)
	Expr -> Matched                                    (21)
	Expr -> Unmatched                                  (22)
	Matched -> Disjunction                             (23)
	Matched -> LValue ':=' Matched                     (24)
	Matched -> id '[' Matched ']'                      (25)
	Matched -> if Expr then Matched else Matched       (26)
	Matched -> while Expr do Matched                   (27)
	Matched -> for id ':=' Expr to Expr do Matched     (28)
	Unmatched -> LValue ':=' Unmatched                 (29)
	Unmatched -> id '[' Matched ']' of Unmatched       (30)
	Unmatched -> if Expr then Matched else Unmatched   (31)
	Unmatched -> if Expr then Matched                  (32)
	Unmatched -> while Expr do Unmatched               (33)
	Unmatched -> for id ':=' Expr to Expr do Unmatched   (34)
	LValue -> id LValue1                               (35)
	LValue1 -> '[' Matched ']' LValue1                 (36)
	LValue1 -> '.' id LValue1                          (37)
	LValue1 ->                                         (38)
	Disjunction -> Disjunction '|' Conjunction         (39)
	Disjunction -> Conjunction                         (40)
	Conjunction -> Conjunction '&' Compare             (41)
	Conjunction -> Compare                             (42)
	Compare -> ArithExpr '=' ArithExpr                 (43)
	Compare -> ArithExpr '<>' ArithExpr                (44)
	Compare -> ArithExpr '>' ArithExpr                 (45)
	Compare -> ArithExpr '<' ArithExpr                 (46)
	Compare -> ArithExpr '>=' ArithExpr                (47)
	Compare -> ArithExpr '<=' ArithExpr                (48)
	ArithExpr -> ArithExpr '+' Term                    (49)
	ArithExpr -> ArithExpr '-' Term                    (50)
	Term -> Term '*' PrefExpr                          (51)
	Term -> Term '/' PrefExpr                          (52)
	Term -> PrefExpr                                   (53)
	PrefExpr -> '-' PrefExpr                           (54)
	PrefExpr -> Factor                                 (55)
	Factor -> LValue                                   (56)
	Factor -> nil                                      (57)
	Factor -> '(' ExprSequence ')'                     (58)
	Factor -> int                                      (59)
	Factor -> string                                   (60)
	Factor -> id '(' CallArgs ')'                      (61)
	Factor -> TypeId '{' Fields '}'                    (62)
	Factor -> break                                    (63)
	Factor -> let Decs in ExprSequence end             (64)
	CallArgs -> CallArgsRev                            (65)
	CallArgs ->                                        (66)
	CallArgsRev -> Expr                                (67)
	CallArgsRev -> CallArgsRev ',' Expr                (68)
	Fields -> FieldsRev                                (69)
	Fields ->                                          (70)
	FieldsRev -> Field                                 (71)
	FieldsRev -> FieldsRev ',' Field                   (72)
	Field -> id '=' Expr                               (73)
	ExprSequence -> ExprSequenceRev                    (74)
	ExprSequence ->                                    (75)
	ExprSequenceRev -> Expr                            (76)
	ExprSequenceRev -> ExprSequenceRev ';' Expr        (77)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	while          { While _ }
	for            { For _ }
	to             { To _ }
	break          { Break _ }
	let            { Let _ }
	in             { In _ }
	end            { End _ }
	function       { Function _ }
	var            { Var _ }
	type           { Type _ }
	array          { Array _ }
	if             { If _ }
	then           { Then _ }
	else           { Else _ }
	do             { Do _ }
	of             { Of _ }
	nil            { Nil _ }
	','            { Comma _ }
	':'            { Colon _ }
	';'            { Semicolon _ }
	'('            { LParen _ }
	')'            { RParen _ }
	'['            { LBracket _ }
	']'            { RBracket _ }
	'{'            { LBrace _ }
	'}'            { RBrace _ }
	'.'            { Dot _ }
	'+'            { Plus _ }
	'-'            { Minus _ }
	'*'            { Times _ }
	'/'            { Divide _ }
	'='            { Eq _ }
	'<>'           { Neq _ }
	'<'            { Lt _ }
	'<='           { Le _ }
	'>'            { Gt _ }
	'>='           { Ge _ }
	'&'            { And _ }
	'|'            { Or _ }
	':='           { Assign _ }
	string         { StrLiteral _ $$ }
	int            { IntLiteral _ $$ }
	id             { Id _ $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Program         rule  1
	Decs            rules 2, 3
	Dec             rules 4, 5, 6
	TyDec           rule  7
	Ty              rules 8, 9, 10
	TyFields        rules 11, 12
	TyFieldsRev     rules 13, 14
	TyField         rule  15
	TypeId          rule  16
	VarDec          rule  17
	OptType         rules 18, 19
	FunDec          rule  20
	Expr            rules 21, 22
	Matched         rules 23, 24, 25, 26, 27, 28
	Unmatched       rules 29, 30, 31, 32, 33, 34
	LValue          rule  35
	LValue1         rules 36, 37, 38
	Disjunction     rules 39, 40
	Conjunction     rules 41, 42
	Compare         rules 43, 44, 45, 46, 47, 48
	ArithExpr       rules 49, 50
	Term            rules 51, 52, 53
	PrefExpr        rules 54, 55
	Factor          rules 56, 57, 58, 59, 60, 61, 62, 63, 64
	CallArgs        rules 65, 66
	CallArgsRev     rules 67, 68
	Fields          rules 69, 70
	FieldsRev       rules 71, 72
	Field           rule  73
	ExprSequence    rules 74, 75
	ExprSequenceRev rules 76, 77

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	while          shift, and enter state 10
	for            shift, and enter state 11
	if             shift, and enter state 12
	id             shift, and enter state 13

	Program        goto state 14
	Expr           goto state 2
	Matched        goto state 3
	Unmatched      goto state 4
	LValue         goto state 5
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 1


	while          shift, and enter state 10
	for            shift, and enter state 11
	if             shift, and enter state 12
	id             shift, and enter state 13

	Expr           goto state 2
	Matched        goto state 3
	Unmatched      goto state 4
	LValue         goto state 5
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 2

	Program -> Expr .                                   (rule 1)

	%eof           reduce using rule 1


State 3

	Expr -> Matched .                                   (rule 21)

	to             reduce using rule 21
	in             reduce using rule 21
	end            reduce using rule 21
	function       reduce using rule 21
	var            reduce using rule 21
	type           reduce using rule 21
	then           reduce using rule 21
	do             reduce using rule 21
	','            reduce using rule 21
	';'            reduce using rule 21
	')'            reduce using rule 21
	'}'            reduce using rule 21
	%eof           reduce using rule 21


State 4

	Expr -> Unmatched .                                 (rule 22)

	to             reduce using rule 22
	in             reduce using rule 22
	end            reduce using rule 22
	function       reduce using rule 22
	var            reduce using rule 22
	type           reduce using rule 22
	then           reduce using rule 22
	do             reduce using rule 22
	','            reduce using rule 22
	';'            reduce using rule 22
	')'            reduce using rule 22
	'}'            reduce using rule 22
	%eof           reduce using rule 22


State 5

	Matched -> LValue . ':=' Matched                    (rule 24)
	Unmatched -> LValue . ':=' Unmatched                (rule 29)

	':='           shift, and enter state 31


State 6

	Matched -> Disjunction .                            (rule 23)
	Disjunction -> Disjunction . '|' Conjunction        (rule 39)

	to             reduce using rule 23
	in             reduce using rule 23
	end            reduce using rule 23
	function       reduce using rule 23
	var            reduce using rule 23
	type           reduce using rule 23
	then           reduce using rule 23
	else           reduce using rule 23
	do             reduce using rule 23
	','            reduce using rule 23
	';'            reduce using rule 23
	')'            reduce using rule 23
	']'            reduce using rule 23
	'}'            reduce using rule 23
	'|'            shift, and enter state 30
	%eof           reduce using rule 23


State 7

	Disjunction -> Conjunction .                        (rule 40)
	Conjunction -> Conjunction . '&' Compare            (rule 41)

	to             reduce using rule 40
	in             reduce using rule 40
	end            reduce using rule 40
	function       reduce using rule 40
	var            reduce using rule 40
	type           reduce using rule 40
	then           reduce using rule 40
	else           reduce using rule 40
	do             reduce using rule 40
	','            reduce using rule 40
	';'            reduce using rule 40
	')'            reduce using rule 40
	']'            reduce using rule 40
	'}'            reduce using rule 40
	'&'            shift, and enter state 29
	'|'            reduce using rule 40
	%eof           reduce using rule 40


State 8

	Conjunction -> Compare .                            (rule 42)

	to             reduce using rule 42
	in             reduce using rule 42
	end            reduce using rule 42
	function       reduce using rule 42
	var            reduce using rule 42
	type           reduce using rule 42
	then           reduce using rule 42
	else           reduce using rule 42
	do             reduce using rule 42
	','            reduce using rule 42
	';'            reduce using rule 42
	')'            reduce using rule 42
	']'            reduce using rule 42
	'}'            reduce using rule 42
	'&'            reduce using rule 42
	'|'            reduce using rule 42
	%eof           reduce using rule 42


State 9

	Compare -> ArithExpr . '=' ArithExpr                (rule 43)
	Compare -> ArithExpr . '<>' ArithExpr               (rule 44)
	Compare -> ArithExpr . '>' ArithExpr                (rule 45)
	Compare -> ArithExpr . '<' ArithExpr                (rule 46)
	Compare -> ArithExpr . '>=' ArithExpr               (rule 47)
	Compare -> ArithExpr . '<=' ArithExpr               (rule 48)
	ArithExpr -> ArithExpr . '+' Term                   (rule 49)
	ArithExpr -> ArithExpr . '-' Term                   (rule 50)

	'+'            shift, and enter state 21
	'-'            shift, and enter state 22
	'='            shift, and enter state 23
	'<>'           shift, and enter state 24
	'<'            shift, and enter state 25
	'<='           shift, and enter state 26
	'>'            shift, and enter state 27
	'>='           shift, and enter state 28


State 10

	Matched -> while . Expr do Matched                  (rule 27)
	Unmatched -> while . Expr do Unmatched              (rule 33)

	while          shift, and enter state 10
	for            shift, and enter state 11
	if             shift, and enter state 12
	id             shift, and enter state 13

	Expr           goto state 20
	Matched        goto state 3
	Unmatched      goto state 4
	LValue         goto state 5
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 11

	Matched -> for . id ':=' Expr to Expr do Matched    (rule 28)
	Unmatched -> for . id ':=' Expr to Expr do Unmatched    (rule 34)

	id             shift, and enter state 19


State 12

	Matched -> if . Expr then Matched else Matched      (rule 26)
	Unmatched -> if . Expr then Matched else Unmatched    (rule 31)
	Unmatched -> if . Expr then Matched                 (rule 32)

	while          shift, and enter state 10
	for            shift, and enter state 11
	if             shift, and enter state 12
	id             shift, and enter state 13

	Expr           goto state 18
	Matched        goto state 3
	Unmatched      goto state 4
	LValue         goto state 5
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 13

	Matched -> id . '[' Matched ']'                     (rule 25)
	Unmatched -> id . '[' Matched ']' of Unmatched      (rule 30)
	LValue -> id . LValue1                              (rule 35)

	'['            shift, and enter state 16
	'.'            shift, and enter state 17
	':='           reduce using rule 38

	LValue1        goto state 15

State 14

	%start_parse -> Program .                           (rule 0)

	%eof           accept


State 15

	LValue -> id LValue1 .                              (rule 35)

	to             reduce using rule 35
	in             reduce using rule 35
	end            reduce using rule 35
	function       reduce using rule 35
	var            reduce using rule 35
	type           reduce using rule 35
	then           reduce using rule 35
	else           reduce using rule 35
	do             reduce using rule 35
	','            reduce using rule 35
	';'            reduce using rule 35
	')'            reduce using rule 35
	']'            reduce using rule 35
	'}'            reduce using rule 35
	'+'            reduce using rule 35
	'-'            reduce using rule 35
	'*'            reduce using rule 35
	'/'            reduce using rule 35
	'='            reduce using rule 35
	'<>'           reduce using rule 35
	'<'            reduce using rule 35
	'<='           reduce using rule 35
	'>'            reduce using rule 35
	'>='           reduce using rule 35
	'&'            reduce using rule 35
	'|'            reduce using rule 35
	':='           reduce using rule 35
	%eof           reduce using rule 35


State 16

	Matched -> id '[' . Matched ']'                     (rule 25)
	Unmatched -> id '[' . Matched ']' of Unmatched      (rule 30)
	LValue1 -> '[' . Matched ']' LValue1                (rule 36)

	while          shift, and enter state 62
	for            shift, and enter state 63
	if             shift, and enter state 64
	id             shift, and enter state 65

	Matched        goto state 60
	LValue         goto state 61
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 17

	LValue1 -> '.' . id LValue1                         (rule 37)

	id             shift, and enter state 59


State 18

	Matched -> if Expr . then Matched else Matched      (rule 26)
	Unmatched -> if Expr . then Matched else Unmatched    (rule 31)
	Unmatched -> if Expr . then Matched                 (rule 32)

	then           shift, and enter state 58


State 19

	Matched -> for id . ':=' Expr to Expr do Matched    (rule 28)
	Unmatched -> for id . ':=' Expr to Expr do Unmatched    (rule 34)

	':='           shift, and enter state 57


State 20

	Matched -> while Expr . do Matched                  (rule 27)
	Unmatched -> while Expr . do Unmatched              (rule 33)

	do             shift, and enter state 56


State 21

	ArithExpr -> ArithExpr '+' . Term                   (rule 49)

	break          shift, and enter state 47
	let            shift, and enter state 48
	nil            shift, and enter state 49
	'('            shift, and enter state 50
	'-'            shift, and enter state 51
	string         shift, and enter state 52
	int            shift, and enter state 53
	id             shift, and enter state 54

	TypeId         goto state 42
	LValue         goto state 43
	Term           goto state 55
	PrefExpr       goto state 45
	Factor         goto state 46

State 22

	ArithExpr -> ArithExpr '-' . Term                   (rule 50)

	break          shift, and enter state 47
	let            shift, and enter state 48
	nil            shift, and enter state 49
	'('            shift, and enter state 50
	'-'            shift, and enter state 51
	string         shift, and enter state 52
	int            shift, and enter state 53
	id             shift, and enter state 54

	TypeId         goto state 42
	LValue         goto state 43
	Term           goto state 44
	PrefExpr       goto state 45
	Factor         goto state 46

State 23

	Compare -> ArithExpr '=' . ArithExpr                (rule 43)


	ArithExpr      goto state 41

State 24

	Compare -> ArithExpr '<>' . ArithExpr               (rule 44)


	ArithExpr      goto state 40

State 25

	Compare -> ArithExpr '<' . ArithExpr                (rule 46)


	ArithExpr      goto state 39

State 26

	Compare -> ArithExpr '<=' . ArithExpr               (rule 48)


	ArithExpr      goto state 38

State 27

	Compare -> ArithExpr '>' . ArithExpr                (rule 45)


	ArithExpr      goto state 37

State 28

	Compare -> ArithExpr '>=' . ArithExpr               (rule 47)


	ArithExpr      goto state 36

State 29

	Conjunction -> Conjunction '&' . Compare            (rule 41)


	Compare        goto state 35
	ArithExpr      goto state 9

State 30

	Disjunction -> Disjunction '|' . Conjunction        (rule 39)


	Conjunction    goto state 34
	Compare        goto state 8
	ArithExpr      goto state 9

State 31

	Matched -> LValue ':=' . Matched                    (rule 24)
	Unmatched -> LValue ':=' . Unmatched                (rule 29)

	while          shift, and enter state 10
	for            shift, and enter state 11
	if             shift, and enter state 12
	id             shift, and enter state 13

	Matched        goto state 32
	Unmatched      goto state 33
	LValue         goto state 5
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 32

	Matched -> LValue ':=' Matched .                    (rule 24)

	to             reduce using rule 24
	in             reduce using rule 24
	end            reduce using rule 24
	function       reduce using rule 24
	var            reduce using rule 24
	type           reduce using rule 24
	then           reduce using rule 24
	else           reduce using rule 24
	do             reduce using rule 24
	','            reduce using rule 24
	';'            reduce using rule 24
	')'            reduce using rule 24
	']'            reduce using rule 24
	'}'            reduce using rule 24
	%eof           reduce using rule 24


State 33

	Unmatched -> LValue ':=' Unmatched .                (rule 29)

	to             reduce using rule 29
	in             reduce using rule 29
	end            reduce using rule 29
	function       reduce using rule 29
	var            reduce using rule 29
	type           reduce using rule 29
	then           reduce using rule 29
	do             reduce using rule 29
	','            reduce using rule 29
	';'            reduce using rule 29
	')'            reduce using rule 29
	'}'            reduce using rule 29
	%eof           reduce using rule 29


State 34

	Disjunction -> Disjunction '|' Conjunction .        (rule 39)
	Conjunction -> Conjunction . '&' Compare            (rule 41)

	to             reduce using rule 39
	in             reduce using rule 39
	end            reduce using rule 39
	function       reduce using rule 39
	var            reduce using rule 39
	type           reduce using rule 39
	then           reduce using rule 39
	else           reduce using rule 39
	do             reduce using rule 39
	','            reduce using rule 39
	';'            reduce using rule 39
	')'            reduce using rule 39
	']'            reduce using rule 39
	'}'            reduce using rule 39
	'&'            shift, and enter state 29
	'|'            reduce using rule 39
	%eof           reduce using rule 39


State 35

	Conjunction -> Conjunction '&' Compare .            (rule 41)

	to             reduce using rule 41
	in             reduce using rule 41
	end            reduce using rule 41
	function       reduce using rule 41
	var            reduce using rule 41
	type           reduce using rule 41
	then           reduce using rule 41
	else           reduce using rule 41
	do             reduce using rule 41
	','            reduce using rule 41
	';'            reduce using rule 41
	')'            reduce using rule 41
	']'            reduce using rule 41
	'}'            reduce using rule 41
	'&'            reduce using rule 41
	'|'            reduce using rule 41
	%eof           reduce using rule 41


State 36

	Compare -> ArithExpr '>=' ArithExpr .               (rule 47)
	ArithExpr -> ArithExpr . '+' Term                   (rule 49)
	ArithExpr -> ArithExpr . '-' Term                   (rule 50)

	to             reduce using rule 47
	in             reduce using rule 47
	end            reduce using rule 47
	function       reduce using rule 47
	var            reduce using rule 47
	type           reduce using rule 47
	then           reduce using rule 47
	else           reduce using rule 47
	do             reduce using rule 47
	','            reduce using rule 47
	';'            reduce using rule 47
	')'            reduce using rule 47
	']'            reduce using rule 47
	'}'            reduce using rule 47
	'+'            shift, and enter state 21
	'-'            shift, and enter state 22
	'&'            reduce using rule 47
	'|'            reduce using rule 47
	%eof           reduce using rule 47


State 37

	Compare -> ArithExpr '>' ArithExpr .                (rule 45)
	ArithExpr -> ArithExpr . '+' Term                   (rule 49)
	ArithExpr -> ArithExpr . '-' Term                   (rule 50)

	to             reduce using rule 45
	in             reduce using rule 45
	end            reduce using rule 45
	function       reduce using rule 45
	var            reduce using rule 45
	type           reduce using rule 45
	then           reduce using rule 45
	else           reduce using rule 45
	do             reduce using rule 45
	','            reduce using rule 45
	';'            reduce using rule 45
	')'            reduce using rule 45
	']'            reduce using rule 45
	'}'            reduce using rule 45
	'+'            shift, and enter state 21
	'-'            shift, and enter state 22
	'&'            reduce using rule 45
	'|'            reduce using rule 45
	%eof           reduce using rule 45


State 38

	Compare -> ArithExpr '<=' ArithExpr .               (rule 48)
	ArithExpr -> ArithExpr . '+' Term                   (rule 49)
	ArithExpr -> ArithExpr . '-' Term                   (rule 50)

	to             reduce using rule 48
	in             reduce using rule 48
	end            reduce using rule 48
	function       reduce using rule 48
	var            reduce using rule 48
	type           reduce using rule 48
	then           reduce using rule 48
	else           reduce using rule 48
	do             reduce using rule 48
	','            reduce using rule 48
	';'            reduce using rule 48
	')'            reduce using rule 48
	']'            reduce using rule 48
	'}'            reduce using rule 48
	'+'            shift, and enter state 21
	'-'            shift, and enter state 22
	'&'            reduce using rule 48
	'|'            reduce using rule 48
	%eof           reduce using rule 48


State 39

	Compare -> ArithExpr '<' ArithExpr .                (rule 46)
	ArithExpr -> ArithExpr . '+' Term                   (rule 49)
	ArithExpr -> ArithExpr . '-' Term                   (rule 50)

	to             reduce using rule 46
	in             reduce using rule 46
	end            reduce using rule 46
	function       reduce using rule 46
	var            reduce using rule 46
	type           reduce using rule 46
	then           reduce using rule 46
	else           reduce using rule 46
	do             reduce using rule 46
	','            reduce using rule 46
	';'            reduce using rule 46
	')'            reduce using rule 46
	']'            reduce using rule 46
	'}'            reduce using rule 46
	'+'            shift, and enter state 21
	'-'            shift, and enter state 22
	'&'            reduce using rule 46
	'|'            reduce using rule 46
	%eof           reduce using rule 46


State 40

	Compare -> ArithExpr '<>' ArithExpr .               (rule 44)
	ArithExpr -> ArithExpr . '+' Term                   (rule 49)
	ArithExpr -> ArithExpr . '-' Term                   (rule 50)

	to             reduce using rule 44
	in             reduce using rule 44
	end            reduce using rule 44
	function       reduce using rule 44
	var            reduce using rule 44
	type           reduce using rule 44
	then           reduce using rule 44
	else           reduce using rule 44
	do             reduce using rule 44
	','            reduce using rule 44
	';'            reduce using rule 44
	')'            reduce using rule 44
	']'            reduce using rule 44
	'}'            reduce using rule 44
	'+'            shift, and enter state 21
	'-'            shift, and enter state 22
	'&'            reduce using rule 44
	'|'            reduce using rule 44
	%eof           reduce using rule 44


State 41

	Compare -> ArithExpr '=' ArithExpr .                (rule 43)
	ArithExpr -> ArithExpr . '+' Term                   (rule 49)
	ArithExpr -> ArithExpr . '-' Term                   (rule 50)

	to             reduce using rule 43
	in             reduce using rule 43
	end            reduce using rule 43
	function       reduce using rule 43
	var            reduce using rule 43
	type           reduce using rule 43
	then           reduce using rule 43
	else           reduce using rule 43
	do             reduce using rule 43
	','            reduce using rule 43
	';'            reduce using rule 43
	')'            reduce using rule 43
	']'            reduce using rule 43
	'}'            reduce using rule 43
	'+'            shift, and enter state 21
	'-'            shift, and enter state 22
	'&'            reduce using rule 43
	'|'            reduce using rule 43
	%eof           reduce using rule 43


State 42

	Factor -> TypeId . '{' Fields '}'                   (rule 62)

	'{'            shift, and enter state 86


State 43

	Factor -> LValue .                                  (rule 56)

	to             reduce using rule 56
	in             reduce using rule 56
	end            reduce using rule 56
	function       reduce using rule 56
	var            reduce using rule 56
	type           reduce using rule 56
	then           reduce using rule 56
	else           reduce using rule 56
	do             reduce using rule 56
	','            reduce using rule 56
	';'            reduce using rule 56
	')'            reduce using rule 56
	']'            reduce using rule 56
	'}'            reduce using rule 56
	'+'            reduce using rule 56
	'-'            reduce using rule 56
	'*'            reduce using rule 56
	'/'            reduce using rule 56
	'='            reduce using rule 56
	'<>'           reduce using rule 56
	'<'            reduce using rule 56
	'<='           reduce using rule 56
	'>'            reduce using rule 56
	'>='           reduce using rule 56
	'&'            reduce using rule 56
	'|'            reduce using rule 56
	%eof           reduce using rule 56


State 44

	ArithExpr -> ArithExpr '-' Term .                   (rule 50)
	Term -> Term . '*' PrefExpr                         (rule 51)
	Term -> Term . '/' PrefExpr                         (rule 52)

	to             reduce using rule 50
	in             reduce using rule 50
	end            reduce using rule 50
	function       reduce using rule 50
	var            reduce using rule 50
	type           reduce using rule 50
	then           reduce using rule 50
	else           reduce using rule 50
	do             reduce using rule 50
	','            reduce using rule 50
	';'            reduce using rule 50
	')'            reduce using rule 50
	']'            reduce using rule 50
	'}'            reduce using rule 50
	'+'            reduce using rule 50
	'-'            reduce using rule 50
	'*'            shift, and enter state 78
	'/'            shift, and enter state 79
	'='            reduce using rule 50
	'<>'           reduce using rule 50
	'<'            reduce using rule 50
	'<='           reduce using rule 50
	'>'            reduce using rule 50
	'>='           reduce using rule 50
	'&'            reduce using rule 50
	'|'            reduce using rule 50
	%eof           reduce using rule 50


State 45

	Term -> PrefExpr .                                  (rule 53)

	to             reduce using rule 53
	in             reduce using rule 53
	end            reduce using rule 53
	function       reduce using rule 53
	var            reduce using rule 53
	type           reduce using rule 53
	then           reduce using rule 53
	else           reduce using rule 53
	do             reduce using rule 53
	','            reduce using rule 53
	';'            reduce using rule 53
	')'            reduce using rule 53
	']'            reduce using rule 53
	'}'            reduce using rule 53
	'+'            reduce using rule 53
	'-'            reduce using rule 53
	'*'            reduce using rule 53
	'/'            reduce using rule 53
	'='            reduce using rule 53
	'<>'           reduce using rule 53
	'<'            reduce using rule 53
	'<='           reduce using rule 53
	'>'            reduce using rule 53
	'>='           reduce using rule 53
	'&'            reduce using rule 53
	'|'            reduce using rule 53
	%eof           reduce using rule 53


State 46

	PrefExpr -> Factor .                                (rule 55)

	to             reduce using rule 55
	in             reduce using rule 55
	end            reduce using rule 55
	function       reduce using rule 55
	var            reduce using rule 55
	type           reduce using rule 55
	then           reduce using rule 55
	else           reduce using rule 55
	do             reduce using rule 55
	','            reduce using rule 55
	';'            reduce using rule 55
	')'            reduce using rule 55
	']'            reduce using rule 55
	'}'            reduce using rule 55
	'+'            reduce using rule 55
	'-'            reduce using rule 55
	'*'            reduce using rule 55
	'/'            reduce using rule 55
	'='            reduce using rule 55
	'<>'           reduce using rule 55
	'<'            reduce using rule 55
	'<='           reduce using rule 55
	'>'            reduce using rule 55
	'>='           reduce using rule 55
	'&'            reduce using rule 55
	'|'            reduce using rule 55
	%eof           reduce using rule 55


State 47

	Factor -> break .                                   (rule 63)

	to             reduce using rule 63
	in             reduce using rule 63
	end            reduce using rule 63
	function       reduce using rule 63
	var            reduce using rule 63
	type           reduce using rule 63
	then           reduce using rule 63
	else           reduce using rule 63
	do             reduce using rule 63
	','            reduce using rule 63
	';'            reduce using rule 63
	')'            reduce using rule 63
	']'            reduce using rule 63
	'}'            reduce using rule 63
	'+'            reduce using rule 63
	'-'            reduce using rule 63
	'*'            reduce using rule 63
	'/'            reduce using rule 63
	'='            reduce using rule 63
	'<>'           reduce using rule 63
	'<'            reduce using rule 63
	'<='           reduce using rule 63
	'>'            reduce using rule 63
	'>='           reduce using rule 63
	'&'            reduce using rule 63
	'|'            reduce using rule 63
	%eof           reduce using rule 63


State 48

	Factor -> let . Decs in ExprSequence end            (rule 64)

	in             reduce using rule 3
	function       reduce using rule 3
	var            reduce using rule 3
	type           reduce using rule 3

	Decs           goto state 85

State 49

	Factor -> nil .                                     (rule 57)

	to             reduce using rule 57
	in             reduce using rule 57
	end            reduce using rule 57
	function       reduce using rule 57
	var            reduce using rule 57
	type           reduce using rule 57
	then           reduce using rule 57
	else           reduce using rule 57
	do             reduce using rule 57
	','            reduce using rule 57
	';'            reduce using rule 57
	')'            reduce using rule 57
	']'            reduce using rule 57
	'}'            reduce using rule 57
	'+'            reduce using rule 57
	'-'            reduce using rule 57
	'*'            reduce using rule 57
	'/'            reduce using rule 57
	'='            reduce using rule 57
	'<>'           reduce using rule 57
	'<'            reduce using rule 57
	'<='           reduce using rule 57
	'>'            reduce using rule 57
	'>='           reduce using rule 57
	'&'            reduce using rule 57
	'|'            reduce using rule 57
	%eof           reduce using rule 57


State 50

	Factor -> '(' . ExprSequence ')'                    (rule 58)

	while          shift, and enter state 10
	for            shift, and enter state 11
	if             shift, and enter state 12
	')'            reduce using rule 75
	id             shift, and enter state 13

	Expr           goto state 82
	Matched        goto state 3
	Unmatched      goto state 4
	LValue         goto state 5
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9
	ExprSequence   goto state 83
	ExprSequenceRevgoto state 84

State 51

	PrefExpr -> '-' . PrefExpr                          (rule 54)

	break          shift, and enter state 47
	let            shift, and enter state 48
	nil            shift, and enter state 49
	'('            shift, and enter state 50
	'-'            shift, and enter state 51
	string         shift, and enter state 52
	int            shift, and enter state 53
	id             shift, and enter state 54

	TypeId         goto state 42
	LValue         goto state 43
	PrefExpr       goto state 81
	Factor         goto state 46

State 52

	Factor -> string .                                  (rule 60)

	to             reduce using rule 60
	in             reduce using rule 60
	end            reduce using rule 60
	function       reduce using rule 60
	var            reduce using rule 60
	type           reduce using rule 60
	then           reduce using rule 60
	else           reduce using rule 60
	do             reduce using rule 60
	','            reduce using rule 60
	';'            reduce using rule 60
	')'            reduce using rule 60
	']'            reduce using rule 60
	'}'            reduce using rule 60
	'+'            reduce using rule 60
	'-'            reduce using rule 60
	'*'            reduce using rule 60
	'/'            reduce using rule 60
	'='            reduce using rule 60
	'<>'           reduce using rule 60
	'<'            reduce using rule 60
	'<='           reduce using rule 60
	'>'            reduce using rule 60
	'>='           reduce using rule 60
	'&'            reduce using rule 60
	'|'            reduce using rule 60
	%eof           reduce using rule 60


State 53

	Factor -> int .                                     (rule 59)

	to             reduce using rule 59
	in             reduce using rule 59
	end            reduce using rule 59
	function       reduce using rule 59
	var            reduce using rule 59
	type           reduce using rule 59
	then           reduce using rule 59
	else           reduce using rule 59
	do             reduce using rule 59
	','            reduce using rule 59
	';'            reduce using rule 59
	')'            reduce using rule 59
	']'            reduce using rule 59
	'}'            reduce using rule 59
	'+'            reduce using rule 59
	'-'            reduce using rule 59
	'*'            reduce using rule 59
	'/'            reduce using rule 59
	'='            reduce using rule 59
	'<>'           reduce using rule 59
	'<'            reduce using rule 59
	'<='           reduce using rule 59
	'>'            reduce using rule 59
	'>='           reduce using rule 59
	'&'            reduce using rule 59
	'|'            reduce using rule 59
	%eof           reduce using rule 59


State 54

	TypeId -> id .                                      (rule 16)
	LValue -> id . LValue1                              (rule 35)
	Factor -> id . '(' CallArgs ')'                     (rule 61)

	to             reduce using rule 38
	in             reduce using rule 38
	end            reduce using rule 38
	function       reduce using rule 38
	var            reduce using rule 38
	type           reduce using rule 38
	then           reduce using rule 38
	else           reduce using rule 38
	do             reduce using rule 38
	','            reduce using rule 38
	';'            reduce using rule 38
	'('            shift, and enter state 80
	')'            reduce using rule 38
	'['            shift, and enter state 73
	']'            reduce using rule 38
	'{'            reduce using rule 16
	'}'            reduce using rule 38
	'.'            shift, and enter state 17
	'+'            reduce using rule 38
	'-'            reduce using rule 38
	'*'            reduce using rule 38
	'/'            reduce using rule 38
	'='            reduce using rule 38
	'<>'           reduce using rule 38
	'<'            reduce using rule 38
	'<='           reduce using rule 38
	'>'            reduce using rule 38
	'>='           reduce using rule 38
	'&'            reduce using rule 38
	'|'            reduce using rule 38
	%eof           reduce using rule 38

	LValue1        goto state 15

State 55

	ArithExpr -> ArithExpr '+' Term .                   (rule 49)
	Term -> Term . '*' PrefExpr                         (rule 51)
	Term -> Term . '/' PrefExpr                         (rule 52)

	to             reduce using rule 49
	in             reduce using rule 49
	end            reduce using rule 49
	function       reduce using rule 49
	var            reduce using rule 49
	type           reduce using rule 49
	then           reduce using rule 49
	else           reduce using rule 49
	do             reduce using rule 49
	','            reduce using rule 49
	';'            reduce using rule 49
	')'            reduce using rule 49
	']'            reduce using rule 49
	'}'            reduce using rule 49
	'+'            reduce using rule 49
	'-'            reduce using rule 49
	'*'            shift, and enter state 78
	'/'            shift, and enter state 79
	'='            reduce using rule 49
	'<>'           reduce using rule 49
	'<'            reduce using rule 49
	'<='           reduce using rule 49
	'>'            reduce using rule 49
	'>='           reduce using rule 49
	'&'            reduce using rule 49
	'|'            reduce using rule 49
	%eof           reduce using rule 49


State 56

	Matched -> while Expr do . Matched                  (rule 27)
	Unmatched -> while Expr do . Unmatched              (rule 33)

	while          shift, and enter state 10
	for            shift, and enter state 11
	if             shift, and enter state 12
	id             shift, and enter state 13

	Matched        goto state 76
	Unmatched      goto state 77
	LValue         goto state 5
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 57

	Matched -> for id ':=' . Expr to Expr do Matched    (rule 28)
	Unmatched -> for id ':=' . Expr to Expr do Unmatched    (rule 34)

	while          shift, and enter state 10
	for            shift, and enter state 11
	if             shift, and enter state 12
	id             shift, and enter state 13

	Expr           goto state 75
	Matched        goto state 3
	Unmatched      goto state 4
	LValue         goto state 5
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 58

	Matched -> if Expr then . Matched else Matched      (rule 26)
	Unmatched -> if Expr then . Matched else Unmatched    (rule 31)
	Unmatched -> if Expr then . Matched                 (rule 32)

	while          shift, and enter state 62
	for            shift, and enter state 63
	if             shift, and enter state 64
	id             shift, and enter state 65

	Matched        goto state 74
	LValue         goto state 61
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 59

	LValue1 -> '.' id . LValue1                         (rule 37)

	to             reduce using rule 38
	in             reduce using rule 38
	end            reduce using rule 38
	function       reduce using rule 38
	var            reduce using rule 38
	type           reduce using rule 38
	then           reduce using rule 38
	else           reduce using rule 38
	do             reduce using rule 38
	','            reduce using rule 38
	';'            reduce using rule 38
	')'            reduce using rule 38
	'['            shift, and enter state 73
	']'            reduce using rule 38
	'}'            reduce using rule 38
	'.'            shift, and enter state 17
	'+'            reduce using rule 38
	'-'            reduce using rule 38
	'*'            reduce using rule 38
	'/'            reduce using rule 38
	'='            reduce using rule 38
	'<>'           reduce using rule 38
	'<'            reduce using rule 38
	'<='           reduce using rule 38
	'>'            reduce using rule 38
	'>='           reduce using rule 38
	'&'            reduce using rule 38
	'|'            reduce using rule 38
	':='           reduce using rule 38
	%eof           reduce using rule 38

	LValue1        goto state 72

State 60

	Matched -> id '[' Matched . ']'                     (rule 25)
	Unmatched -> id '[' Matched . ']' of Unmatched      (rule 30)
	LValue1 -> '[' Matched . ']' LValue1                (rule 36)

	']'            shift, and enter state 71


State 61

	Matched -> LValue . ':=' Matched                    (rule 24)

	':='           shift, and enter state 70


State 62

	Matched -> while . Expr do Matched                  (rule 27)

	while          shift, and enter state 10
	for            shift, and enter state 11
	if             shift, and enter state 12
	id             shift, and enter state 13

	Expr           goto state 69
	Matched        goto state 3
	Unmatched      goto state 4
	LValue         goto state 5
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 63

	Matched -> for . id ':=' Expr to Expr do Matched    (rule 28)

	id             shift, and enter state 68


State 64

	Matched -> if . Expr then Matched else Matched      (rule 26)

	while          shift, and enter state 10
	for            shift, and enter state 11
	if             shift, and enter state 12
	id             shift, and enter state 13

	Expr           goto state 67
	Matched        goto state 3
	Unmatched      goto state 4
	LValue         goto state 5
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 65

	Matched -> id . '[' Matched ']'                     (rule 25)
	LValue -> id . LValue1                              (rule 35)

	'['            shift, and enter state 66
	'.'            shift, and enter state 17
	':='           reduce using rule 38

	LValue1        goto state 15

State 66

	Matched -> id '[' . Matched ']'                     (rule 25)
	LValue1 -> '[' . Matched ']' LValue1                (rule 36)

	while          shift, and enter state 62
	for            shift, and enter state 63
	if             shift, and enter state 64
	id             shift, and enter state 65

	Matched        goto state 114
	LValue         goto state 61
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 67

	Matched -> if Expr . then Matched else Matched      (rule 26)

	then           shift, and enter state 113


State 68

	Matched -> for id . ':=' Expr to Expr do Matched    (rule 28)

	':='           shift, and enter state 112


State 69

	Matched -> while Expr . do Matched                  (rule 27)

	do             shift, and enter state 111


State 70

	Matched -> LValue ':=' . Matched                    (rule 24)

	while          shift, and enter state 62
	for            shift, and enter state 63
	if             shift, and enter state 64
	id             shift, and enter state 65

	Matched        goto state 32
	LValue         goto state 61
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 71

	Matched -> id '[' Matched ']' .                     (rule 25)
	Unmatched -> id '[' Matched ']' . of Unmatched      (rule 30)
	LValue1 -> '[' Matched ']' . LValue1                (rule 36)

	to             reduce using rule 25
	in             reduce using rule 25
	end            reduce using rule 25
	function       reduce using rule 25
	var            reduce using rule 25
	type           reduce using rule 25
	then           reduce using rule 25
	do             reduce using rule 25
	of             shift, and enter state 110
	','            reduce using rule 25
	';'            reduce using rule 25
	')'            reduce using rule 25
	'['            shift, and enter state 73
	'}'            reduce using rule 25
	'.'            shift, and enter state 17
	':='           reduce using rule 38
	%eof           reduce using rule 25

	LValue1        goto state 109

State 72

	LValue1 -> '.' id LValue1 .                         (rule 37)

	to             reduce using rule 37
	in             reduce using rule 37
	end            reduce using rule 37
	function       reduce using rule 37
	var            reduce using rule 37
	type           reduce using rule 37
	then           reduce using rule 37
	else           reduce using rule 37
	do             reduce using rule 37
	','            reduce using rule 37
	';'            reduce using rule 37
	')'            reduce using rule 37
	']'            reduce using rule 37
	'}'            reduce using rule 37
	'+'            reduce using rule 37
	'-'            reduce using rule 37
	'*'            reduce using rule 37
	'/'            reduce using rule 37
	'='            reduce using rule 37
	'<>'           reduce using rule 37
	'<'            reduce using rule 37
	'<='           reduce using rule 37
	'>'            reduce using rule 37
	'>='           reduce using rule 37
	'&'            reduce using rule 37
	'|'            reduce using rule 37
	':='           reduce using rule 37
	%eof           reduce using rule 37


State 73

	LValue1 -> '[' . Matched ']' LValue1                (rule 36)

	while          shift, and enter state 62
	for            shift, and enter state 63
	if             shift, and enter state 64
	id             shift, and enter state 65

	Matched        goto state 108
	LValue         goto state 61
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 74

	Matched -> if Expr then Matched . else Matched      (rule 26)
	Unmatched -> if Expr then Matched . else Unmatched    (rule 31)
	Unmatched -> if Expr then Matched .                 (rule 32)

	to             reduce using rule 32
	in             reduce using rule 32
	end            reduce using rule 32
	function       reduce using rule 32
	var            reduce using rule 32
	type           reduce using rule 32
	then           reduce using rule 32
	else           shift, and enter state 107
	do             reduce using rule 32
	','            reduce using rule 32
	';'            reduce using rule 32
	')'            reduce using rule 32
	'}'            reduce using rule 32
	%eof           reduce using rule 32


State 75

	Matched -> for id ':=' Expr . to Expr do Matched    (rule 28)
	Unmatched -> for id ':=' Expr . to Expr do Unmatched    (rule 34)

	to             shift, and enter state 106


State 76

	Matched -> while Expr do Matched .                  (rule 27)

	to             reduce using rule 27
	in             reduce using rule 27
	end            reduce using rule 27
	function       reduce using rule 27
	var            reduce using rule 27
	type           reduce using rule 27
	then           reduce using rule 27
	else           reduce using rule 27
	do             reduce using rule 27
	','            reduce using rule 27
	';'            reduce using rule 27
	')'            reduce using rule 27
	']'            reduce using rule 27
	'}'            reduce using rule 27
	%eof           reduce using rule 27


State 77

	Unmatched -> while Expr do Unmatched .              (rule 33)

	to             reduce using rule 33
	in             reduce using rule 33
	end            reduce using rule 33
	function       reduce using rule 33
	var            reduce using rule 33
	type           reduce using rule 33
	then           reduce using rule 33
	do             reduce using rule 33
	','            reduce using rule 33
	';'            reduce using rule 33
	')'            reduce using rule 33
	'}'            reduce using rule 33
	%eof           reduce using rule 33


State 78

	Term -> Term '*' . PrefExpr                         (rule 51)

	break          shift, and enter state 47
	let            shift, and enter state 48
	nil            shift, and enter state 49
	'('            shift, and enter state 50
	'-'            shift, and enter state 51
	string         shift, and enter state 52
	int            shift, and enter state 53
	id             shift, and enter state 54

	TypeId         goto state 42
	LValue         goto state 43
	PrefExpr       goto state 105
	Factor         goto state 46

State 79

	Term -> Term '/' . PrefExpr                         (rule 52)

	break          shift, and enter state 47
	let            shift, and enter state 48
	nil            shift, and enter state 49
	'('            shift, and enter state 50
	'-'            shift, and enter state 51
	string         shift, and enter state 52
	int            shift, and enter state 53
	id             shift, and enter state 54

	TypeId         goto state 42
	LValue         goto state 43
	PrefExpr       goto state 104
	Factor         goto state 46

State 80

	Factor -> id '(' . CallArgs ')'                     (rule 61)

	while          shift, and enter state 10
	for            shift, and enter state 11
	if             shift, and enter state 12
	')'            reduce using rule 66
	id             shift, and enter state 13

	Expr           goto state 101
	Matched        goto state 3
	Unmatched      goto state 4
	LValue         goto state 5
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9
	CallArgs       goto state 102
	CallArgsRev    goto state 103

State 81

	PrefExpr -> '-' PrefExpr .                          (rule 54)

	to             reduce using rule 54
	in             reduce using rule 54
	end            reduce using rule 54
	function       reduce using rule 54
	var            reduce using rule 54
	type           reduce using rule 54
	then           reduce using rule 54
	else           reduce using rule 54
	do             reduce using rule 54
	','            reduce using rule 54
	';'            reduce using rule 54
	')'            reduce using rule 54
	']'            reduce using rule 54
	'}'            reduce using rule 54
	'+'            reduce using rule 54
	'-'            reduce using rule 54
	'*'            reduce using rule 54
	'/'            reduce using rule 54
	'='            reduce using rule 54
	'<>'           reduce using rule 54
	'<'            reduce using rule 54
	'<='           reduce using rule 54
	'>'            reduce using rule 54
	'>='           reduce using rule 54
	'&'            reduce using rule 54
	'|'            reduce using rule 54
	%eof           reduce using rule 54


State 82

	ExprSequenceRev -> Expr .                           (rule 76)

	end            reduce using rule 76
	';'            reduce using rule 76
	')'            reduce using rule 76


State 83

	Factor -> '(' ExprSequence . ')'                    (rule 58)

	')'            shift, and enter state 100


State 84

	ExprSequence -> ExprSequenceRev .                   (rule 74)
	ExprSequenceRev -> ExprSequenceRev . ';' Expr       (rule 77)

	end            reduce using rule 74
	';'            shift, and enter state 99
	')'            reduce using rule 74


State 85

	Decs -> Decs . Dec                                  (rule 2)
	Factor -> let Decs . in ExprSequence end            (rule 64)

	in             shift, and enter state 95
	function       shift, and enter state 96
	var            shift, and enter state 97
	type           shift, and enter state 98

	Dec            goto state 91
	TyDec          goto state 92
	VarDec         goto state 93
	FunDec         goto state 94

State 86

	Factor -> TypeId '{' . Fields '}'                   (rule 62)

	'}'            reduce using rule 70
	id             shift, and enter state 90

	Fields         goto state 87
	FieldsRev      goto state 88
	Field          goto state 89

State 87

	Factor -> TypeId '{' Fields . '}'                   (rule 62)

	'}'            shift, and enter state 137


State 88

	Fields -> FieldsRev .                               (rule 69)
	FieldsRev -> FieldsRev . ',' Field                  (rule 72)

	','            shift, and enter state 136
	'}'            reduce using rule 69


State 89

	FieldsRev -> Field .                                (rule 71)

	','            reduce using rule 71
	'}'            reduce using rule 71


State 90

	Field -> id . '=' Expr                              (rule 73)

	'='            shift, and enter state 135


State 91

	Decs -> Decs Dec .                                  (rule 2)

	in             reduce using rule 2
	function       reduce using rule 2
	var            reduce using rule 2
	type           reduce using rule 2


State 92

	Dec -> TyDec .                                      (rule 4)

	in             reduce using rule 4
	function       reduce using rule 4
	var            reduce using rule 4
	type           reduce using rule 4


State 93

	Dec -> VarDec .                                     (rule 5)

	in             reduce using rule 5
	function       reduce using rule 5
	var            reduce using rule 5
	type           reduce using rule 5


State 94

	Dec -> FunDec .                                     (rule 6)

	in             reduce using rule 6
	function       reduce using rule 6
	var            reduce using rule 6
	type           reduce using rule 6


State 95

	Factor -> let Decs in . ExprSequence end            (rule 64)

	while          shift, and enter state 10
	for            shift, and enter state 11
	end            reduce using rule 75
	if             shift, and enter state 12
	id             shift, and enter state 13

	Expr           goto state 82
	Matched        goto state 3
	Unmatched      goto state 4
	LValue         goto state 5
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9
	ExprSequence   goto state 134
	ExprSequenceRevgoto state 84

State 96

	FunDec -> function . id '(' TyFields ')' OptType '=' Expr    (rule 20)

	id             shift, and enter state 133


State 97

	VarDec -> var . id OptType ':=' Expr                (rule 17)

	id             shift, and enter state 132


State 98

	TyDec -> type . id '=' Ty                           (rule 7)

	id             shift, and enter state 131


State 99

	ExprSequenceRev -> ExprSequenceRev ';' . Expr       (rule 77)

	while          shift, and enter state 10
	for            shift, and enter state 11
	if             shift, and enter state 12
	id             shift, and enter state 13

	Expr           goto state 130
	Matched        goto state 3
	Unmatched      goto state 4
	LValue         goto state 5
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 100

	Factor -> '(' ExprSequence ')' .                    (rule 58)

	to             reduce using rule 58
	in             reduce using rule 58
	end            reduce using rule 58
	function       reduce using rule 58
	var            reduce using rule 58
	type           reduce using rule 58
	then           reduce using rule 58
	else           reduce using rule 58
	do             reduce using rule 58
	','            reduce using rule 58
	';'            reduce using rule 58
	')'            reduce using rule 58
	']'            reduce using rule 58
	'}'            reduce using rule 58
	'+'            reduce using rule 58
	'-'            reduce using rule 58
	'*'            reduce using rule 58
	'/'            reduce using rule 58
	'='            reduce using rule 58
	'<>'           reduce using rule 58
	'<'            reduce using rule 58
	'<='           reduce using rule 58
	'>'            reduce using rule 58
	'>='           reduce using rule 58
	'&'            reduce using rule 58
	'|'            reduce using rule 58
	%eof           reduce using rule 58


State 101

	CallArgsRev -> Expr .                               (rule 67)

	','            reduce using rule 67
	')'            reduce using rule 67


State 102

	Factor -> id '(' CallArgs . ')'                     (rule 61)

	')'            shift, and enter state 129


State 103

	CallArgs -> CallArgsRev .                           (rule 65)
	CallArgsRev -> CallArgsRev . ',' Expr               (rule 68)

	','            shift, and enter state 128
	')'            reduce using rule 65


State 104

	Term -> Term '/' PrefExpr .                         (rule 52)

	to             reduce using rule 52
	in             reduce using rule 52
	end            reduce using rule 52
	function       reduce using rule 52
	var            reduce using rule 52
	type           reduce using rule 52
	then           reduce using rule 52
	else           reduce using rule 52
	do             reduce using rule 52
	','            reduce using rule 52
	';'            reduce using rule 52
	')'            reduce using rule 52
	']'            reduce using rule 52
	'}'            reduce using rule 52
	'+'            reduce using rule 52
	'-'            reduce using rule 52
	'*'            reduce using rule 52
	'/'            reduce using rule 52
	'='            reduce using rule 52
	'<>'           reduce using rule 52
	'<'            reduce using rule 52
	'<='           reduce using rule 52
	'>'            reduce using rule 52
	'>='           reduce using rule 52
	'&'            reduce using rule 52
	'|'            reduce using rule 52
	%eof           reduce using rule 52


State 105

	Term -> Term '*' PrefExpr .                         (rule 51)

	to             reduce using rule 51
	in             reduce using rule 51
	end            reduce using rule 51
	function       reduce using rule 51
	var            reduce using rule 51
	type           reduce using rule 51
	then           reduce using rule 51
	else           reduce using rule 51
	do             reduce using rule 51
	','            reduce using rule 51
	';'            reduce using rule 51
	')'            reduce using rule 51
	']'            reduce using rule 51
	'}'            reduce using rule 51
	'+'            reduce using rule 51
	'-'            reduce using rule 51
	'*'            reduce using rule 51
	'/'            reduce using rule 51
	'='            reduce using rule 51
	'<>'           reduce using rule 51
	'<'            reduce using rule 51
	'<='           reduce using rule 51
	'>'            reduce using rule 51
	'>='           reduce using rule 51
	'&'            reduce using rule 51
	'|'            reduce using rule 51
	%eof           reduce using rule 51


State 106

	Matched -> for id ':=' Expr to . Expr do Matched    (rule 28)
	Unmatched -> for id ':=' Expr to . Expr do Unmatched    (rule 34)

	while          shift, and enter state 10
	for            shift, and enter state 11
	if             shift, and enter state 12
	id             shift, and enter state 13

	Expr           goto state 127
	Matched        goto state 3
	Unmatched      goto state 4
	LValue         goto state 5
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 107

	Matched -> if Expr then Matched else . Matched      (rule 26)
	Unmatched -> if Expr then Matched else . Unmatched    (rule 31)

	while          shift, and enter state 10
	for            shift, and enter state 11
	if             shift, and enter state 12
	id             shift, and enter state 13

	Matched        goto state 125
	Unmatched      goto state 126
	LValue         goto state 5
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 108

	LValue1 -> '[' Matched . ']' LValue1                (rule 36)

	']'            shift, and enter state 124


State 109

	LValue1 -> '[' Matched ']' LValue1 .                (rule 36)

	to             reduce using rule 36
	in             reduce using rule 36
	end            reduce using rule 36
	function       reduce using rule 36
	var            reduce using rule 36
	type           reduce using rule 36
	then           reduce using rule 36
	else           reduce using rule 36
	do             reduce using rule 36
	','            reduce using rule 36
	';'            reduce using rule 36
	')'            reduce using rule 36
	']'            reduce using rule 36
	'}'            reduce using rule 36
	'+'            reduce using rule 36
	'-'            reduce using rule 36
	'*'            reduce using rule 36
	'/'            reduce using rule 36
	'='            reduce using rule 36
	'<>'           reduce using rule 36
	'<'            reduce using rule 36
	'<='           reduce using rule 36
	'>'            reduce using rule 36
	'>='           reduce using rule 36
	'&'            reduce using rule 36
	'|'            reduce using rule 36
	':='           reduce using rule 36
	%eof           reduce using rule 36


State 110

	Unmatched -> id '[' Matched ']' of . Unmatched      (rule 30)

	while          shift, and enter state 120
	for            shift, and enter state 121
	if             shift, and enter state 122
	id             shift, and enter state 123

	Unmatched      goto state 118
	LValue         goto state 119

State 111

	Matched -> while Expr do . Matched                  (rule 27)

	while          shift, and enter state 62
	for            shift, and enter state 63
	if             shift, and enter state 64
	id             shift, and enter state 65

	Matched        goto state 76
	LValue         goto state 61
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 112

	Matched -> for id ':=' . Expr to Expr do Matched    (rule 28)

	while          shift, and enter state 10
	for            shift, and enter state 11
	if             shift, and enter state 12
	id             shift, and enter state 13

	Expr           goto state 117
	Matched        goto state 3
	Unmatched      goto state 4
	LValue         goto state 5
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 113

	Matched -> if Expr then . Matched else Matched      (rule 26)

	while          shift, and enter state 62
	for            shift, and enter state 63
	if             shift, and enter state 64
	id             shift, and enter state 65

	Matched        goto state 116
	LValue         goto state 61
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 114

	Matched -> id '[' Matched . ']'                     (rule 25)
	LValue1 -> '[' Matched . ']' LValue1                (rule 36)

	']'            shift, and enter state 115


State 115

	Matched -> id '[' Matched ']' .                     (rule 25)
	LValue1 -> '[' Matched ']' . LValue1                (rule 36)

	to             reduce using rule 25
	in             reduce using rule 25
	end            reduce using rule 25
	function       reduce using rule 25
	var            reduce using rule 25
	type           reduce using rule 25
	then           reduce using rule 25
	else           reduce using rule 25
	do             reduce using rule 25
	','            reduce using rule 25
	';'            reduce using rule 25
	')'            reduce using rule 25
	'['            shift, and enter state 73
	']'            reduce using rule 25
	'}'            reduce using rule 25
	'.'            shift, and enter state 17
	':='           reduce using rule 38
	%eof           reduce using rule 25

	LValue1        goto state 109

State 116

	Matched -> if Expr then Matched . else Matched      (rule 26)

	else           shift, and enter state 153


State 117

	Matched -> for id ':=' Expr . to Expr do Matched    (rule 28)

	to             shift, and enter state 152


State 118

	Unmatched -> id '[' Matched ']' of Unmatched .      (rule 30)

	to             reduce using rule 30
	in             reduce using rule 30
	end            reduce using rule 30
	function       reduce using rule 30
	var            reduce using rule 30
	type           reduce using rule 30
	then           reduce using rule 30
	do             reduce using rule 30
	','            reduce using rule 30
	';'            reduce using rule 30
	')'            reduce using rule 30
	'}'            reduce using rule 30
	%eof           reduce using rule 30


State 119

	Unmatched -> LValue . ':=' Unmatched                (rule 29)

	':='           shift, and enter state 151


State 120

	Unmatched -> while . Expr do Unmatched              (rule 33)

	while          shift, and enter state 10
	for            shift, and enter state 11
	if             shift, and enter state 12
	id             shift, and enter state 13

	Expr           goto state 150
	Matched        goto state 3
	Unmatched      goto state 4
	LValue         goto state 5
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 121

	Unmatched -> for . id ':=' Expr to Expr do Unmatched    (rule 34)

	id             shift, and enter state 149


State 122

	Unmatched -> if . Expr then Matched else Unmatched    (rule 31)
	Unmatched -> if . Expr then Matched                 (rule 32)

	while          shift, and enter state 10
	for            shift, and enter state 11
	if             shift, and enter state 12
	id             shift, and enter state 13

	Expr           goto state 148
	Matched        goto state 3
	Unmatched      goto state 4
	LValue         goto state 5
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 123

	Unmatched -> id . '[' Matched ']' of Unmatched      (rule 30)
	LValue -> id . LValue1                              (rule 35)

	'['            shift, and enter state 147
	'.'            shift, and enter state 17
	':='           reduce using rule 38

	LValue1        goto state 15

State 124

	LValue1 -> '[' Matched ']' . LValue1                (rule 36)

	to             reduce using rule 38
	in             reduce using rule 38
	end            reduce using rule 38
	function       reduce using rule 38
	var            reduce using rule 38
	type           reduce using rule 38
	then           reduce using rule 38
	else           reduce using rule 38
	do             reduce using rule 38
	','            reduce using rule 38
	';'            reduce using rule 38
	')'            reduce using rule 38
	'['            shift, and enter state 73
	']'            reduce using rule 38
	'}'            reduce using rule 38
	'.'            shift, and enter state 17
	'+'            reduce using rule 38
	'-'            reduce using rule 38
	'*'            reduce using rule 38
	'/'            reduce using rule 38
	'='            reduce using rule 38
	'<>'           reduce using rule 38
	'<'            reduce using rule 38
	'<='           reduce using rule 38
	'>'            reduce using rule 38
	'>='           reduce using rule 38
	'&'            reduce using rule 38
	'|'            reduce using rule 38
	':='           reduce using rule 38
	%eof           reduce using rule 38

	LValue1        goto state 109

State 125

	Matched -> if Expr then Matched else Matched .      (rule 26)

	to             reduce using rule 26
	in             reduce using rule 26
	end            reduce using rule 26
	function       reduce using rule 26
	var            reduce using rule 26
	type           reduce using rule 26
	then           reduce using rule 26
	else           reduce using rule 26
	do             reduce using rule 26
	','            reduce using rule 26
	';'            reduce using rule 26
	')'            reduce using rule 26
	']'            reduce using rule 26
	'}'            reduce using rule 26
	%eof           reduce using rule 26


State 126

	Unmatched -> if Expr then Matched else Unmatched .    (rule 31)

	to             reduce using rule 31
	in             reduce using rule 31
	end            reduce using rule 31
	function       reduce using rule 31
	var            reduce using rule 31
	type           reduce using rule 31
	then           reduce using rule 31
	do             reduce using rule 31
	','            reduce using rule 31
	';'            reduce using rule 31
	')'            reduce using rule 31
	'}'            reduce using rule 31
	%eof           reduce using rule 31


State 127

	Matched -> for id ':=' Expr to Expr . do Matched    (rule 28)
	Unmatched -> for id ':=' Expr to Expr . do Unmatched    (rule 34)

	do             shift, and enter state 146


State 128

	CallArgsRev -> CallArgsRev ',' . Expr               (rule 68)

	while          shift, and enter state 10
	for            shift, and enter state 11
	if             shift, and enter state 12
	id             shift, and enter state 13

	Expr           goto state 145
	Matched        goto state 3
	Unmatched      goto state 4
	LValue         goto state 5
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 129

	Factor -> id '(' CallArgs ')' .                     (rule 61)

	to             reduce using rule 61
	in             reduce using rule 61
	end            reduce using rule 61
	function       reduce using rule 61
	var            reduce using rule 61
	type           reduce using rule 61
	then           reduce using rule 61
	else           reduce using rule 61
	do             reduce using rule 61
	','            reduce using rule 61
	';'            reduce using rule 61
	')'            reduce using rule 61
	']'            reduce using rule 61
	'}'            reduce using rule 61
	'+'            reduce using rule 61
	'-'            reduce using rule 61
	'*'            reduce using rule 61
	'/'            reduce using rule 61
	'='            reduce using rule 61
	'<>'           reduce using rule 61
	'<'            reduce using rule 61
	'<='           reduce using rule 61
	'>'            reduce using rule 61
	'>='           reduce using rule 61
	'&'            reduce using rule 61
	'|'            reduce using rule 61
	%eof           reduce using rule 61


State 130

	ExprSequenceRev -> ExprSequenceRev ';' Expr .       (rule 77)

	end            reduce using rule 77
	';'            reduce using rule 77
	')'            reduce using rule 77


State 131

	TyDec -> type id . '=' Ty                           (rule 7)

	'='            shift, and enter state 144


State 132

	VarDec -> var id . OptType ':=' Expr                (rule 17)

	':'            shift, and enter state 143
	':='           reduce using rule 19

	OptType        goto state 142

State 133

	FunDec -> function id . '(' TyFields ')' OptType '=' Expr    (rule 20)

	'('            shift, and enter state 141


State 134

	Factor -> let Decs in ExprSequence . end            (rule 64)

	end            shift, and enter state 140


State 135

	Field -> id '=' . Expr                              (rule 73)

	while          shift, and enter state 10
	for            shift, and enter state 11
	if             shift, and enter state 12
	id             shift, and enter state 13

	Expr           goto state 139
	Matched        goto state 3
	Unmatched      goto state 4
	LValue         goto state 5
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 136

	FieldsRev -> FieldsRev ',' . Field                  (rule 72)

	id             shift, and enter state 90

	Field          goto state 138

State 137

	Factor -> TypeId '{' Fields '}' .                   (rule 62)

	to             reduce using rule 62
	in             reduce using rule 62
	end            reduce using rule 62
	function       reduce using rule 62
	var            reduce using rule 62
	type           reduce using rule 62
	then           reduce using rule 62
	else           reduce using rule 62
	do             reduce using rule 62
	','            reduce using rule 62
	';'            reduce using rule 62
	')'            reduce using rule 62
	']'            reduce using rule 62
	'}'            reduce using rule 62
	'+'            reduce using rule 62
	'-'            reduce using rule 62
	'*'            reduce using rule 62
	'/'            reduce using rule 62
	'='            reduce using rule 62
	'<>'           reduce using rule 62
	'<'            reduce using rule 62
	'<='           reduce using rule 62
	'>'            reduce using rule 62
	'>='           reduce using rule 62
	'&'            reduce using rule 62
	'|'            reduce using rule 62
	%eof           reduce using rule 62


State 138

	FieldsRev -> FieldsRev ',' Field .                  (rule 72)

	','            reduce using rule 72
	'}'            reduce using rule 72


State 139

	Field -> id '=' Expr .                              (rule 73)

	','            reduce using rule 73
	'}'            reduce using rule 73


State 140

	Factor -> let Decs in ExprSequence end .            (rule 64)

	to             reduce using rule 64
	in             reduce using rule 64
	end            reduce using rule 64
	function       reduce using rule 64
	var            reduce using rule 64
	type           reduce using rule 64
	then           reduce using rule 64
	else           reduce using rule 64
	do             reduce using rule 64
	','            reduce using rule 64
	';'            reduce using rule 64
	')'            reduce using rule 64
	']'            reduce using rule 64
	'}'            reduce using rule 64
	'+'            reduce using rule 64
	'-'            reduce using rule 64
	'*'            reduce using rule 64
	'/'            reduce using rule 64
	'='            reduce using rule 64
	'<>'           reduce using rule 64
	'<'            reduce using rule 64
	'<='           reduce using rule 64
	'>'            reduce using rule 64
	'>='           reduce using rule 64
	'&'            reduce using rule 64
	'|'            reduce using rule 64
	%eof           reduce using rule 64


State 141

	FunDec -> function id '(' . TyFields ')' OptType '=' Expr    (rule 20)

	')'            reduce using rule 12
	id             shift, and enter state 171

	TyFields       goto state 168
	TyFieldsRev    goto state 169
	TyField        goto state 170

State 142

	VarDec -> var id OptType . ':=' Expr                (rule 17)

	':='           shift, and enter state 167


State 143

	OptType -> ':' . TypeId                             (rule 18)

	id             shift, and enter state 166

	TypeId         goto state 165

State 144

	TyDec -> type id '=' . Ty                           (rule 7)

	array          shift, and enter state 162
	'{'            shift, and enter state 163
	id             shift, and enter state 164

	Ty             goto state 161

State 145

	CallArgsRev -> CallArgsRev ',' Expr .               (rule 68)

	','            reduce using rule 68
	')'            reduce using rule 68


State 146

	Matched -> for id ':=' Expr to Expr do . Matched    (rule 28)
	Unmatched -> for id ':=' Expr to Expr do . Unmatched    (rule 34)

	while          shift, and enter state 10
	for            shift, and enter state 11
	if             shift, and enter state 12
	id             shift, and enter state 13

	Matched        goto state 159
	Unmatched      goto state 160
	LValue         goto state 5
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 147

	Unmatched -> id '[' . Matched ']' of Unmatched      (rule 30)
	LValue1 -> '[' . Matched ']' LValue1                (rule 36)

	while          shift, and enter state 62
	for            shift, and enter state 63
	if             shift, and enter state 64
	id             shift, and enter state 65

	Matched        goto state 158
	LValue         goto state 61
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 148

	Unmatched -> if Expr . then Matched else Unmatched    (rule 31)
	Unmatched -> if Expr . then Matched                 (rule 32)

	then           shift, and enter state 157


State 149

	Unmatched -> for id . ':=' Expr to Expr do Unmatched    (rule 34)

	':='           shift, and enter state 156


State 150

	Unmatched -> while Expr . do Unmatched              (rule 33)

	do             shift, and enter state 155


State 151

	Unmatched -> LValue ':=' . Unmatched                (rule 29)

	while          shift, and enter state 120
	for            shift, and enter state 121
	if             shift, and enter state 122
	id             shift, and enter state 123

	Unmatched      goto state 33
	LValue         goto state 119

State 152

	Matched -> for id ':=' Expr to . Expr do Matched    (rule 28)

	while          shift, and enter state 10
	for            shift, and enter state 11
	if             shift, and enter state 12
	id             shift, and enter state 13

	Expr           goto state 154
	Matched        goto state 3
	Unmatched      goto state 4
	LValue         goto state 5
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 153

	Matched -> if Expr then Matched else . Matched      (rule 26)

	while          shift, and enter state 62
	for            shift, and enter state 63
	if             shift, and enter state 64
	id             shift, and enter state 65

	Matched        goto state 125
	LValue         goto state 61
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 154

	Matched -> for id ':=' Expr to Expr . do Matched    (rule 28)

	do             shift, and enter state 181


State 155

	Unmatched -> while Expr do . Unmatched              (rule 33)

	while          shift, and enter state 120
	for            shift, and enter state 121
	if             shift, and enter state 122
	id             shift, and enter state 123

	Unmatched      goto state 77
	LValue         goto state 119

State 156

	Unmatched -> for id ':=' . Expr to Expr do Unmatched    (rule 34)

	while          shift, and enter state 10
	for            shift, and enter state 11
	if             shift, and enter state 12
	id             shift, and enter state 13

	Expr           goto state 180
	Matched        goto state 3
	Unmatched      goto state 4
	LValue         goto state 5
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 157

	Unmatched -> if Expr then . Matched else Unmatched    (rule 31)
	Unmatched -> if Expr then . Matched                 (rule 32)

	while          shift, and enter state 62
	for            shift, and enter state 63
	if             shift, and enter state 64
	id             shift, and enter state 65

	Matched        goto state 179
	LValue         goto state 61
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 158

	Unmatched -> id '[' Matched . ']' of Unmatched      (rule 30)
	LValue1 -> '[' Matched . ']' LValue1                (rule 36)

	']'            shift, and enter state 178


State 159

	Matched -> for id ':=' Expr to Expr do Matched .    (rule 28)

	to             reduce using rule 28
	in             reduce using rule 28
	end            reduce using rule 28
	function       reduce using rule 28
	var            reduce using rule 28
	type           reduce using rule 28
	then           reduce using rule 28
	else           reduce using rule 28
	do             reduce using rule 28
	','            reduce using rule 28
	';'            reduce using rule 28
	')'            reduce using rule 28
	']'            reduce using rule 28
	'}'            reduce using rule 28
	%eof           reduce using rule 28


State 160

	Unmatched -> for id ':=' Expr to Expr do Unmatched .    (rule 34)

	to             reduce using rule 34
	in             reduce using rule 34
	end            reduce using rule 34
	function       reduce using rule 34
	var            reduce using rule 34
	type           reduce using rule 34
	then           reduce using rule 34
	do             reduce using rule 34
	','            reduce using rule 34
	';'            reduce using rule 34
	')'            reduce using rule 34
	'}'            reduce using rule 34
	%eof           reduce using rule 34


State 161

	TyDec -> type id '=' Ty .                           (rule 7)

	in             reduce using rule 7
	function       reduce using rule 7
	var            reduce using rule 7
	type           reduce using rule 7


State 162

	Ty -> array . of id                                 (rule 10)

	of             shift, and enter state 177


State 163

	Ty -> '{' . TyFields '}'                            (rule 9)

	'}'            reduce using rule 12
	id             shift, and enter state 171

	TyFields       goto state 176
	TyFieldsRev    goto state 169
	TyField        goto state 170

State 164

	Ty -> id .                                          (rule 8)

	in             reduce using rule 8
	function       reduce using rule 8
	var            reduce using rule 8
	type           reduce using rule 8


State 165

	OptType -> ':' TypeId .                             (rule 18)

	'='            reduce using rule 18
	':='           reduce using rule 18


State 166

	TypeId -> id .                                      (rule 16)

	','            reduce using rule 16
	')'            reduce using rule 16
	'}'            reduce using rule 16
	'='            reduce using rule 16
	':='           reduce using rule 16


State 167

	VarDec -> var id OptType ':=' . Expr                (rule 17)

	while          shift, and enter state 10
	for            shift, and enter state 11
	if             shift, and enter state 12
	id             shift, and enter state 13

	Expr           goto state 175
	Matched        goto state 3
	Unmatched      goto state 4
	LValue         goto state 5
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 168

	FunDec -> function id '(' TyFields . ')' OptType '=' Expr    (rule 20)

	')'            shift, and enter state 174


State 169

	TyFields -> TyFieldsRev .                           (rule 11)
	TyFieldsRev -> TyFieldsRev . ',' TyField            (rule 14)

	','            shift, and enter state 173
	')'            reduce using rule 11
	'}'            reduce using rule 11


State 170

	TyFieldsRev -> TyField .                            (rule 13)

	','            reduce using rule 13
	')'            reduce using rule 13
	'}'            reduce using rule 13


State 171

	TyField -> id . ':' TypeId                          (rule 15)

	':'            shift, and enter state 172


State 172

	TyField -> id ':' . TypeId                          (rule 15)

	id             shift, and enter state 166

	TypeId         goto state 188

State 173

	TyFieldsRev -> TyFieldsRev ',' . TyField            (rule 14)

	id             shift, and enter state 171

	TyField        goto state 187

State 174

	FunDec -> function id '(' TyFields ')' . OptType '=' Expr    (rule 20)

	':'            shift, and enter state 143
	'='            reduce using rule 19

	OptType        goto state 186

State 175

	VarDec -> var id OptType ':=' Expr .                (rule 17)

	in             reduce using rule 17
	function       reduce using rule 17
	var            reduce using rule 17
	type           reduce using rule 17


State 176

	Ty -> '{' TyFields . '}'                            (rule 9)

	'}'            shift, and enter state 185


State 177

	Ty -> array of . id                                 (rule 10)

	id             shift, and enter state 184


State 178

	Unmatched -> id '[' Matched ']' . of Unmatched      (rule 30)
	LValue1 -> '[' Matched ']' . LValue1                (rule 36)

	of             shift, and enter state 110
	'['            shift, and enter state 73
	'.'            shift, and enter state 17
	':='           reduce using rule 38

	LValue1        goto state 109

State 179

	Unmatched -> if Expr then Matched . else Unmatched    (rule 31)
	Unmatched -> if Expr then Matched .                 (rule 32)

	to             reduce using rule 32
	in             reduce using rule 32
	end            reduce using rule 32
	function       reduce using rule 32
	var            reduce using rule 32
	type           reduce using rule 32
	then           reduce using rule 32
	else           shift, and enter state 183
	do             reduce using rule 32
	','            reduce using rule 32
	';'            reduce using rule 32
	')'            reduce using rule 32
	'}'            reduce using rule 32
	%eof           reduce using rule 32


State 180

	Unmatched -> for id ':=' Expr . to Expr do Unmatched    (rule 34)

	to             shift, and enter state 182


State 181

	Matched -> for id ':=' Expr to Expr do . Matched    (rule 28)

	while          shift, and enter state 62
	for            shift, and enter state 63
	if             shift, and enter state 64
	id             shift, and enter state 65

	Matched        goto state 159
	LValue         goto state 61
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 182

	Unmatched -> for id ':=' Expr to . Expr do Unmatched    (rule 34)

	while          shift, and enter state 10
	for            shift, and enter state 11
	if             shift, and enter state 12
	id             shift, and enter state 13

	Expr           goto state 190
	Matched        goto state 3
	Unmatched      goto state 4
	LValue         goto state 5
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 183

	Unmatched -> if Expr then Matched else . Unmatched    (rule 31)

	while          shift, and enter state 120
	for            shift, and enter state 121
	if             shift, and enter state 122
	id             shift, and enter state 123

	Unmatched      goto state 126
	LValue         goto state 119

State 184

	Ty -> array of id .                                 (rule 10)

	in             reduce using rule 10
	function       reduce using rule 10
	var            reduce using rule 10
	type           reduce using rule 10


State 185

	Ty -> '{' TyFields '}' .                            (rule 9)

	in             reduce using rule 9
	function       reduce using rule 9
	var            reduce using rule 9
	type           reduce using rule 9


State 186

	FunDec -> function id '(' TyFields ')' OptType . '=' Expr    (rule 20)

	'='            shift, and enter state 189


State 187

	TyFieldsRev -> TyFieldsRev ',' TyField .            (rule 14)

	','            reduce using rule 14
	')'            reduce using rule 14
	'}'            reduce using rule 14


State 188

	TyField -> id ':' TypeId .                          (rule 15)

	','            reduce using rule 15
	')'            reduce using rule 15
	'}'            reduce using rule 15


State 189

	FunDec -> function id '(' TyFields ')' OptType '=' . Expr    (rule 20)

	while          shift, and enter state 10
	for            shift, and enter state 11
	if             shift, and enter state 12
	id             shift, and enter state 13

	Expr           goto state 192
	Matched        goto state 3
	Unmatched      goto state 4
	LValue         goto state 5
	Disjunction    goto state 6
	Conjunction    goto state 7
	Compare        goto state 8
	ArithExpr      goto state 9

State 190

	Unmatched -> for id ':=' Expr to Expr . do Unmatched    (rule 34)

	do             shift, and enter state 191


State 191

	Unmatched -> for id ':=' Expr to Expr do . Unmatched    (rule 34)

	while          shift, and enter state 120
	for            shift, and enter state 121
	if             shift, and enter state 122
	id             shift, and enter state 123

	Unmatched      goto state 160
	LValue         goto state 119

State 192

	FunDec -> function id '(' TyFields ')' OptType '=' Expr .    (rule 20)

	in             reduce using rule 20
	function       reduce using rule 20
	var            reduce using rule 20
	type           reduce using rule 20


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 78
Number of terminals: 43
Number of non-terminals: 32
Number of states: 193
